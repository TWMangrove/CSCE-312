
/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // select whether A register is previous ALU output or instruction   
    Mux16(a=instruction, b=ALUout1, sel=instruction[5], out=temp);      // select if A is destination
    Mux16(a=instruction, b=temp, sel=instruction[15], out=selIns);      // select if A or C instruction

    // A Register
    Not(in=instruction[15], out=notA);
    Or(a=notA, b=instruction[5], out=useA);                                              // in order to use A, MSB must be 0 or d1 must be 1 
    ARegister(in=selIns, load=useA, out=aRegOut1, out=aRegOut2, out[0..14]=addressM);
    
    // D Register
    And(a=instruction[4], b=instruction[15], out=useD);                                 // in order to use D, MSB must be 1 and d2 must be 1
    DRegister(in=ALUout2, load=useD, out=dReg);                      

    // Select whether using A or M register 
    Mux16(a=aRegOut1, b=inM, sel=instruction[12], out=amReg);                           // select if using A or M register  

    // ALU
    ALU(x=dReg, y=amReg, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout1, out=ALUout2, zr=isZero, zr=isZeroTemp, ng=isNeg, ng=isNegTemp);

    //PC 
    Or(a=isNegTemp, b=isZeroTemp, out=isPosTemp);  
    Not(in=isPosTemp, out=isPos);                  // check if ALU output is positive
    
    And(a=isPos, b=instruction[0], out=j3);        // check for JGT, JGE, JNE, where output should be positive 
    And(a=isZero, b=instruction[1], out=j2);       // check for JEQ, JEQ, JLE, where output should be zero
    And(a=isNeg, b=instruction[2], out=j1);        // check for JLT, JNE, JLE, where output shoudl be negative

    Or(a=j3, b=j2, out=j23);
    Or(a=j23, b=j1, out=jump);                      // check if any valid jumps

    And(a=instruction[15], b=jump, out=willJump);   // if c-instruct and valid jump, then jump   

    PC(in=aRegOut2, load=willJump, inc=true, reset=reset, out[0..14]=pc);   // pc counter

    //writeM
    And(a=instruction[3], b=instruction[15], out=writeM);    // if c-instruct and d3, then use RAM[A]

}
