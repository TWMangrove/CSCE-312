//NAME: Freddy Velasco
//UIN: 327004703

/**
 * Adds or Subtracts two 10-bit values.
 * Both inputs a and b are in SIGNED 2s complement format
 * when sub == 0, the chip performs add i.e. out=a+b
 * when sub == 1, the chip performs subtract i.e. out=a-b
 * overflow reflects the overflow condition for 10-bit add/subtract in 2s complement
 */

CHIP AddSub10 {
    IN a[10], b[10], sub;
    OUT out[10], overflow;

    PARTS:
   // Put you code here:
   
   // Not input in case 
   Not16(in[0..9]=b, in[10..15]=false,  out[0..9]=notb, out[10..15]=false);
   
   // Begin Converting to 2s compliment if sub
   Mux16(a[0..9]=b, a[10..15]=false, b[0..9]=notb, b[10..15]=false, sel=sub, out[0..3]=actualb1, out[4..7]=actualb2, out[8]=actualb3, out[9]=actualb4, out[10..15]=false);
   
   // Straightfoward use of Adders, uses sub as first carry in to complete 2s compliment conversion 
   RCA4(A=a[0..3], B=actualb1, cin=sub, sum=out[0..3], cout=c1);
   RCA4(A=a[4..7], B=actualb2, cin=c1, sum=out[4..7], cout=c2);

   // Use FAs for last two slices to get carryout of both
   FullAdder(a=a[8], b=actualb3, c=c2, sum=out[8], carry=c3);
   FullAdder(a=a[9], b=actualb4, c=c3, sum=out[9], carry=c4);

   // Xor last two carry outs to account for overflow
   Xor(a=c3, b=c4, out=overflow);
}